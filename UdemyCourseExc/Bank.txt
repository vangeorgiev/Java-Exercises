import java.util.ArrayList;

public class Customer {
    private String name;
    private ArrayList<Double> transactions;

    public Customer(String name, double initialAmount) {
        this.name = name;
        this.transactions = new ArrayList<Double>();
        addTransaction(initialAmount);
    }

    public void addTransaction(double amount) {
        this.transactions.add(amount);
    }


    public String getName() {
        return name;
    }

    public ArrayList<Double> getTransactions() {
        return transactions;
    }
}


import java.util.ArrayList;

public class Branch {
    private String name;
    private ArrayList<Customer> customers;

    public Branch(String name) {
        this.name = name;
        this.customers = new ArrayList<Customer>();
    }


    public boolean newCustomer(String name, double initialAmount) {
        if (findCustomer(name) == null) {
            customers.add(new Customer(name, initialAmount));
            return true;
        }
        return false;
    }

    public boolean addCustomerTransaction(String name, double amount) {
        if (findCustomer(name) != null) {
            findCustomer(name).addTransaction(amount);
            return true;
        }
        return false;
    }

    private Customer findCustomer(String name) {
        for (int i = 0; i < customers.size(); i++) {
            if (customers.get(i).getName().equals(name)) {
                return this.customers.get(i);
            }
        }
        return null;
    }

    public String getName() {
        return name;
    }

    public ArrayList<Customer> getCustomers() {
        return customers;
    }
}


import java.util.ArrayList;

public class Bank {
    private ArrayList<Branch> branches;

    public Bank() {
        this.branches = new ArrayList<Branch>();
    }

    public boolean newBranch(String name) {
        if (findBranch(name) == null) {
            branches.add(new Branch(name));
            return true;
        }
        return false;
    }

    public boolean addCustomer(String branchName, String customerName, double initialAmount) {
        if (findBranch(branchName) != null) {
            Branch existingBranch = findBranch(branchName);
            return existingBranch.newCustomer(customerName, initialAmount);
        }
        return false;
    }

    public boolean addCustomerTransaction(String branchName, String customerName, double amount) {
        if (findBranch(branchName) != null) {
            Branch existingBranch = findBranch(branchName);
            return existingBranch.addCustomerTransaction(customerName, amount);
        }
        return false;
    }

    public void showCustomer(String branchName) {
        if (findBranch(branchName) != null) {
            System.out.println("Customer details for branch: " + findBranch(branchName).getName());

            Branch existingBranch = findBranch(branchName);

            for (int i = 0; i < existingBranch.getCustomers().size(); i++) {
                String customerName = existingBranch.getCustomers().get(i).getName();
                System.out.println(i+1 + "." + customerName);
                int size = existingBranch.getCustomers().get(i).getTransactions().size();
                for (int j = 0; j < size; j++) {
                    double transaction = existingBranch.getCustomers().get(i).getTransactions().get(j);
                    System.out.println(j+1 + "Transcation -->" + transaction);
                }

            }
        }
    }


    public Branch findBranch(String name) {
        for (int i = 0; i < branches.size(); i++) {
            if (branches.get(i).getName().equals(name)) {
                return this.branches.get(i);
            }
        }
        return null;
    }


    public ArrayList<Branch> getBranches() {
        return branches;
    }
}
